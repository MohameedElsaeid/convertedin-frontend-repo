import { Observable } from 'rxjs';
import {
  AdGoal,
  AdSuggestions,
  CategoryItem,
  CreateAd,
  CreateAdChannel,
  LocationItem,
  MatchAdSuggestions,
  ReachEstimate,
  ReachEstimateRequest,
  SocialMediaPosts,
  SuggestionItem,
} from '../models';
import { CreateAdState } from '@flyerz/store/create-ad';
import { MatchSuggestions } from '../models/interfaces/match-suggestions.interface';

export abstract class CreateAdApi {
  /**
   * Gets a list of supported areas for the selected city
   * @param cityId City id to get areas for
   * @param offset Start index of data
   * @param limit Max size of data
   * @param q Search filter
   */
  abstract getAreas(
    cityId: number,
    offset?: number,
    limit?: number,
    q?: string
  ): Observable<{ data: Array<LocationItem> }>;

  /**
   * Gets a list of supported cities
   * @param offset Start index of data
   * @param limit Max size of data
   * @param q Search filter
   */
  abstract getCities(
    offset?: number,
    limit?: number,
    q?: string
  ): Observable<{ data: Array<LocationItem> }>;

  /**
   * Gets a list of demographics
   * @param offset Start index of data
   * @param limit Max size of data
   * @param q Search filter
   */
  abstract getBehaviours(
    offset?: number,
    limit?: number,
    q?: string
  ): Observable<{ data: Array<CategoryItem> }>;

  /**
   * Gets a list of demographics
   * @param offset Start index of data
   * @param limit Max size of data
   * @param q Search filter
   */
  abstract getDemographics(
    offset?: number,
    limit?: number,
    q?: string
  ): Observable<{ data: Array<CategoryItem> }>;

  /**
   * Gets a list of interests
   * @param offset Start index of data
   * @param limit Max size of data
   * @param q Search filter
   */
  abstract getInterests(
    offset?: number,
    limit?: number,
    q?: string
  ): Observable<{ data: Array<SuggestionItem> }>;

  /**
   * Creates reach estimate calculation based on AI data
   * @param data Data to be mapped to create reach estimate
   */
  abstract createReachEstimate(
    data: MatchAdSuggestions
  ): Observable<{ data: ReachEstimate }>;

  /**
   * Gets a list of social media channels for ad creation
   */
  abstract getChannels(): Observable<{ data: Array<CreateAdChannel> }>;

  /**
   * Gets a list of facebook posts for connected account
   */
  abstract getFacebookPosts(
    offset?: number,
    limit?: number
  ): Observable<SocialMediaPosts>;

  /**
   * Gets a list of instagram posts for connected account
   */
  abstract getInstagramPosts(next?: string): Observable<SocialMediaPosts>;

  /**
   * Gets goals for creating ad
   */
  abstract getGoals(): Observable<{ data: Array<AdGoal> }>;

  /**
   * Gets ad insights from AI based on provided post message
   * @param adContent Message to be analyzed
   * @returns Suggested insights data
   */
  abstract createAdByAI(adContent: string): Observable<{ data: AdSuggestions }>;

  /**
   * Match AI insights to get accurate results
   * @param suggestions Suggested insights data generated by AI
   */
  abstract matchAdSuggestions(
    suggestions: AdSuggestions
  ): Observable<{ data: MatchAdSuggestions }>;

  /**
   * Creates a new AD based on provided & selected data
   * @param ad Ad data to be created
   */
  abstract createAd(ad: CreateAdState): Observable<any>;

  /**
   * Maps AI suggestions to match data request
   * @param suggestions Suggested insights data generated by AI
   * @returns Mapped data for matching
   */
  protected abstract createMatchSuggestions(
    suggestions: AdSuggestions
  ): MatchSuggestions;

  /**
   * Mapps provided data to create ad request shape
   * @param ad Data to be mapped
   * @returns Mapped data for creating Ad
   */
  protected abstract createAdData(ad: CreateAdState): CreateAd;

  /**
   * Mapps provided data to change it to send reach estimate request
   * @param data Data to be mapped
   */
  protected abstract createReachEstimateData(
    data: MatchAdSuggestions
  ): ReachEstimateRequest;
}
